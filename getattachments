#!/usr/bin/env python

# getattachments
# version 1.1
# Maintainer: None (if you want the job, just edit this line and commit!)

# Example usage:
#   getattachments 00365354 00353463
#
# Usage in a directory that starts with the target case number:
#   getattachments

# Configure first (shared with addattachments):
# echo -e '[strata]\nusername=RHNLOGIN\npassword=RHNPASS\nhost=api.access.redhat.com' > ~/.config/strata.cfg

# 2011.10.25:
#   Taking over as maintainer
# 2011.09.12:
#   Removed Pierre as maintainer now that he no longer works for RH. Lee Yarwood <lyarwood@redhat.com>
# 2011.04.26:
#   cwd / no args logic added by Anna Wiggins <awiggins@redhat.com>
# 2012.05.12:
#   added handling of the obsolete flag - don't download obsolete flags <fdewaley@redhat.com>
# 2012.11.12:
#   updated an exception to get a better error message - thanks Bryn <fdewaley@redhat.com>
# 2012.12.03:
#   Changed script behavior so it downloads attachments and save to the filename.ext_YYYYMMDDHHMMSS
#   to support attachments with the same name (see case 00742036 for an example). Vasyl Kaigorodov <vkaigoro@redhat.com>


import json
import ConfigParser
import re
import getopt

# should disappear with urlgrabber
import httplib
import string
import base64
import subprocess

from os import path, getcwd, utime
#from urlgrabber.grabber import URLGrabber
from sys import stderr, argv, exit
from urllib import quote
from datetime import datetime

cfg = ConfigParser.ConfigParser()
cfg.read(path.expanduser('~/.config/strata.cfg'))

#grabber = URLGrabber()
sosreport_re = re.compile('^sosreport-')

def option(name, encode = True):
  try:
    opt = cfg.get('strata', name)
  except Exception:
    raise Error('Please review your config (see source code)')
  else:
    if encode:
      opt = quote(opt)
    return opt

def get_ticket_cwd():
  ticket = path.split(getcwd())[1]
  ticket = ticket[0:8]
  if re.match(r'\d{8}', ticket):
    return ticket                              
  else:
    print 'no arguments given and current directory does not start with a ticket number'
    exit(1)

def authenticate(conn):
  encd = string.strip(base64.encodestring(option('username', False)+':'+option('password', False)))
  conn.putheader('Authorization', 'Basic '+ encd)

def print_attachment(attachment):
  print "    - file: '%s'\n      url: '%s'" % (attachment[0], attachment[1])

def process_attachments(attachments, files_requested):
  downloads = []
  already_downloaded = []

  for attachment in attachments:
    if sosreport_re.search(attachment[0]):
      attachment_uniq_name = attachment[0]
    else:
      attachment_uniq_name = attachment[0]
      #put the date in front of the file to avoid having to rename gzip files to use them
      #attachment_uniq_name = re.sub('[- :]','',attachment[2]) + "_" + attachment[0]  
      
    # path.exists(attachment[0]) added for compatibility with previous version \
    # which used attachment[0] as a destination filename
    if path.exists("archive/"+attachment_uniq_name) or path.exists("archive/"+attachment[0]):
      already_downloaded.append(attachment)
    elif path.exists(attachment_uniq_name) or path.exists(attachment[0]):
      already_downloaded.append(attachment)
    else:
      attachment += (attachment_uniq_name,)
      downloads.append(attachment)

  if files_requested:
    # check if the file(s) requested exist in the ticket
    available_files = [a[0] for a in attachments]
    missing_files = [f for f in files_requested if f not in available_files]
    if missing_files:
      print "  files not available in the ticket:"
      for m in missing_files:
        print "    - file: %s" % (m)

  if len(already_downloaded) and files_requested:
    l = [a for a in already_downloaded if a[0] in files_requested]
    print "  already downloaded[1]:"
    map(print_attachment, l)
  elif len(already_downloaded):
    print "  already downloaded[2]:"
    map(print_attachment, already_downloaded)
  
  if len(downloads) and files_requested:
    l = [a for a in downloads if a[0] in files_requested]
    print "  to download:"
    map(print_attachment, l)
    map(download, l)
  elif len(downloads):
    print "  to download:"
    map(print_attachment, downloads)
    map(download, downloads)
  else:
    print "  everything is already downloaded:"

def download(attachment):
  # uri = re.sub(r'(https?://)', r"\1%s@" % (option('username')+':'+option('password')), attachment[1])
  # grabber.urlgrab(uri, attachment[0])
  subprocess.call(['wget', '-nv', '--http-user='+option('username', False), '--http-passwd='+option('password', False), attachment[1], '-O', attachment[3]])
  # mtime now provided directly from the API in a new format 
  #import time
  #mtime = time.strptime(attachment[2], "%Y-%m-%d %H:%M:%S")
  #mtime = int(str(time.mktime(mtime))[:10])
  # utime(file, (atime, mtime)) -> use the mtime for both
  #utime(attachment[3], (mtime, mtime))

def getattachments(ticket, files_requested):
  print 'ticket %s:' % ticket
  conn = httplib.HTTPSConnection(option('host', False))
  conn.putrequest('GET', '/rs/cases/'+str(ticket)+'/attachments')
  conn.putheader('Accept', 'application/json')
  authenticate(conn)
  conn.endheaders()
  r = conn.getresponse()

  if r.status != 200:
    print >> stderr, '  failed getting attachments list: \''+str(r.status)+" ("+r.reason+")'"
    return(1)

  else:
    contents = json.loads(r.read())
    try:
      length = len(contents['attachment'])

    except KeyError:
      print '  no attachments.'
      return

    attachments = []

    for file in contents['attachment'] :
      if not file['deprecated']:
          attachments.append((file['file_name'].encode('utf-8'), file['uri'].encode('utf-8'), file['last_modified_date']))
      else:
          print "skipping "+file['file_name']+" as it was marked depredicated"

    process_attachments(attachments, files_requested)

def usage():
  my_name = argv[0]
  print "Usage: %s [-h | --help | -f {FILENAME} | --file={FILENAME} | --files={FILENAME} ] [{TICKET}]" % (my_name)
  print
  print "-h | --help    Show this message."
  print "-f {FILENAME}  Only download FILENAME, option can be repeated and accepts a komma seperated list,"
  print "{TICKET}       Optional ticket number, uses the first numbers of $PWD if not given."
  print
  print "Examples:"
  print "$ %s 00123456" % (my_name)
  print "$ %s -f sosreport.tar.gz" % (my_name)
  print "$ %s --files=sosreport-hostA.tar.gz,sosreport-hostB.tar.gz 00123456" % (my_name)
  print

if __name__ == '__main__':
  files = []

  try:
      opts, args = getopt.getopt(argv[1:], "hf:", ["help", "file=", "files="])
  except getopt.GetoptError, err:
      print str(err)
      usage()
      exit(2)

  for o, a in opts:
      if o in ("-h", "--help"):
          usage()
          exit()
      elif o in ("-f", "--file","--files"):
          files = files + a.split(",")
      else:
          assert False, "unhandled option"

  if not args:
    args = [get_ticket_cwd()]

  if not args:
    usage()
    exit(1)

  for ticket in args:
    getattachments(ticket, files)

